{"version":3,"sources":["App.module.css","recipe/Recipe.module.css","recipe/Recipe.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","Recipe","title","description","image","className","s","recipe","src","alt","App","recipesToDisplay","useState","proteinType","setProteinType","recipes","filter","r","protein","some","p","length","app","header","Box","sx","maxWidth","margin","FormControl","fullWidth","Select","value","onChange","event","target","displayEmpty","inputProps","MenuItem","recipesList","map","i","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"m9EACAA,EAAOC,QAAU,CAAC,IAAM,iBAAiB,OAAS,oBAAoB,YAAc,2B,mBCApFD,EAAOC,QAAU,CAAC,OAAS,uBAAuB,MAAQ,sBAAsB,YAAc,8B,sMCEjFC,EAAS,SAAC,GAAkD,IAAjDC,EAAgD,EAAhDA,MAAOC,EAAyC,EAAzCA,YAAaC,EAA4B,EAA5BA,MACxC,OACI,sBAAKC,UAAWC,IAAEC,OAAlB,UACI,8BAAK,qBAAKC,IAAKJ,EAAOK,IAAI,iBAC1B,qBAAKJ,UAAWC,IAAEJ,MAAlB,SAA0BA,IAC1B,qBAAKG,UAAWC,IAAEH,YAAlB,SAAgCA,QCiD7BO,MAhDf,WAAgB,IAIRC,EAJO,EAE2BC,mBAAsB,OAFjD,mBAEJC,EAFI,KAESC,EAFT,KAKX,OAAQD,GACJ,IAAM,QAAUF,EAAmBI,EAAQC,QAAO,SAAAC,GAAC,OAAIA,EAAEC,QAAQC,MAAK,SAAAC,GAAC,MAAU,UAANA,QAAiB,MAC5F,IAAM,OAAST,EAAmBI,EAAQC,QAAO,SAAAC,GAAC,OAAIA,EAAEC,QAAQC,MAAK,SAAAC,GAAC,MAAU,SAANA,MAAsC,IAArBH,EAAEC,QAAQG,UAAe,MACpH,IAAM,cAAgBV,EAAmBI,EAAQC,QAAO,SAAAC,GAAC,OAAIA,EAAEC,QAAQC,MAAK,SAAAC,GAAC,MAAU,SAANA,GAAsB,SAANA,QAAgB,MACjH,IAAM,MAAQT,EAAmBI,EAOrC,OACI,sBAAKV,UAAWC,IAAEgB,IAAlB,UAEI,qBAAKjB,UAAWC,IAAEiB,OAAlB,SAA0B,+DAC1B,8BACI,cAACC,EAAA,EAAD,CAAKC,GAAI,CAACC,SAAU,IAAKC,OAAQ,UAAjC,SACI,cAACC,EAAA,EAAD,CAAaC,WAAS,EAAtB,SACI,eAACC,EAAA,EAAD,CACIC,MAAOlB,EACPmB,SAbH,SAACC,GAClBnB,EAAemB,EAAMC,OAAOH,QAaRI,cAAY,EACZC,WAAY,CAAC,aAAc,iBAJ/B,UAMI,cAACC,EAAA,EAAD,CAAUN,MAAO,MAAjB,iCACA,cAACM,EAAA,EAAD,CAAUN,MAAO,cAAjB,gCACA,cAACM,EAAA,EAAD,CAAUN,MAAO,OAAjB,8BACA,cAACM,EAAA,EAAD,CAAUN,MAAO,QAAjB,iCAMhB,qBAAK1B,UAAWC,IAAEgC,YAAlB,SACK3B,GAAoBA,EAAiB4B,KAAI,SAACtB,EAAEuB,GAAH,OAAS,cAAC,EAAD,CAAgBtC,MAAOe,EAAEf,MACrCC,YAAac,EAAEd,YACfC,MAAOa,EAAEb,MACTc,QAASD,EAAEC,SAHcsB,YClCjEC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.57b3ae42.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__3OoO3\",\"header\":\"App_header__2g8RA\",\"recipesList\":\"App_recipesList__354cF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"recipe\":\"Recipe_recipe__2QquP\",\"title\":\"Recipe_title__HluP3\",\"description\":\"Recipe_description__lqcxd\"};","import React from \"react\";\r\nimport s from './Recipe.module.css'\r\n\r\nexport const Recipe = ({title, description, image}: RecipePropsType) => {\r\n    return (\r\n        <div className={s.recipe} >\r\n            <div><img src={image} alt='ready dish'/></div>\r\n            <div className={s.title}>{title}</div>\r\n            <div className={s.description}>{description}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\n//types\r\ntype RecipePropsType = {\r\n    title: string\r\n    description: string\r\n    image: string\r\n    protein: string[]\r\n}","import React, {useState} from 'react';\nimport s from './App.module.css'\nimport recipes from './data/recipes.json'\nimport MenuItem from '@mui/material/MenuItem';\nimport FormControl from '@mui/material/FormControl';\nimport Select, {SelectChangeEvent} from '@mui/material/Select';\nimport {Box} from \"@mui/material\";\nimport {Recipe} from \"./recipe/Recipe\";\n\nfunction App() {\n\n    const [proteinType, setProteinType] = useState<ProteinType>('all')\n\n    let recipesToDisplay\n    switch (proteinType) {\n        case ('vegan'): recipesToDisplay = recipes.filter(r => r.protein.some(p => p === 'vegan')); break\n        case ('pesc'): recipesToDisplay = recipes.filter(r => r.protein.some(p => p === 'fish') && r.protein.length === 1); break\n        case ('meatAndFish'): recipesToDisplay = recipes.filter(r => r.protein.some(p => p === 'meat' || p === 'fish')); break\n        case ('all'): recipesToDisplay = recipes\n    }\n\n    const handleChange = (event: SelectChangeEvent) => {\n        setProteinType(event.target.value as ProteinType)\n    }\n\n    return (\n        <div className={s.app}>\n\n            <div className={s.header}><h1>Explore our healthy recipes</h1></div>\n            <div>\n                <Box sx={{maxWidth: 300, margin: '0 auto'}}>\n                    <FormControl fullWidth>\n                        <Select\n                            value={proteinType}\n                            onChange={handleChange}\n                            displayEmpty\n                            inputProps={{'aria-label': 'Without label'}}\n                        >\n                            <MenuItem value={'all'}>All healthy recipes</MenuItem>\n                            <MenuItem value={'meatAndFish'}>Meat and fish only</MenuItem>\n                            <MenuItem value={'pesc'}>Pescatarian only</MenuItem>\n                            <MenuItem value={'vegan'}>Vegan only</MenuItem>\n                        </Select>\n                    </FormControl>\n                </Box>\n            </div>\n\n            <div className={s.recipesList}>\n                {recipesToDisplay && recipesToDisplay.map((r,i) => <Recipe key={i} title={r.title}\n                                                       description={r.description}\n                                                       image={r.image}\n                                                       protein={r.protein} />)}\n            </div>\n        </div>\n    );\n}\n\nexport default App\n\n//types\ntype ProteinType = 'all' | 'meatAndFish' | 'pesc' | 'vegan'\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}